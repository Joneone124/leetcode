# 给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。
# 
# 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
# 
# 你可以假设除了整数 0 之外，这个整数不会以零开头。
# 
# 示例 1:
# 
# 输入: [1,2,3]
# 输出: [1,2,4]
# 解释: 输入数组表示数字 123。
# 示例 2:
# 
# 输入: [4,3,2,1]
# 输出: [4,3,2,2]
# 解释: 输入数组表示数字 4321。



class Solution(object):
    def plusOne(self, digits):
        """
        :type digits: List[int]
        :rtype: List[int]
        """
        '''
        mymethod
        a = ''
        list1 =[]
        for i in digits:
            a += str(i)
        a = int(a)
        a += 1
        a = str(a)
        for i in a:
            list1.append(int(i))
        return list1
        '''
        #从后往前遍历，注意最前面是-1
        for i in range(len(digits)-1, -1, -1):
            #每次最后一位先+1
            digits[i] += 1
            #令最后一位的新值为和10取余后的值，如果+1后是10(即原来是9),现在和10取余结果为0，也就是+1后进位了，要继续往前遍历
            #如果+1后不是10，则没有进位，和10取余结果是其本身，直接返回就好
            digits[i] = digits[i] % 10
            if digits [i] != 0:
                return digits
        #能遍历到头，说明原来是99999...
        #则单独给它100000...
        newdigits = [0] * (len(digits)+1)
        newdigits[0] = 1
        return newdigits
