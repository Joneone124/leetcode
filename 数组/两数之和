'''给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]
'''

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """

        '''
        my_method
        one = 0
        two = 0
        for i in nums:
            for j in nums:
                if i + j == target and one != two:
                    return [one,two]
                    break
                two += 1
            two = 0
            one += 1
        '''
        
        
        #先空字典
        dct = {}
        #通过枚举方法拿到下标和数据
        for i, n in enumerate(nums):
            #如果目标值减得到值在字典里，就返回这个键值对的键和本次循环的下表i
            if target - n in dct:
                return [dct[target - n], i]
            #如果不在字典里，就把本次循环拿到的值n当键，下表i当值，存入字典
            dct[n] = i
        #速度快是因为一次循环，且用键值对直接匹配，不用遍历，直接通过关键字key得到要存取的记录内存存储位置
        
        
        #哈希是什么，为什么快？
        #https://www.cnblogs.com/acm-bingzi/p/hash.html
        #哈希查找
        #https://blog.csdn.net/weixin_41362649/article/details/81865829
