#第88道
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        '''mymethod
        j = 0
        #先合并两个数组
        for i in range(m, len(nums1)):
            nums1[i] = nums2[j]
            j += 1
        #再用冒泡排序
        for i in range(len(nums1)):
            for j in range(len(nums1) - i - 1):
                if nums1[j] >= nums1[j + 1]:
                    nums1[j], nums1[j + 1] = nums1[j + 1], nums1[j]
        return nums1
        #但题目的意图明显不是这样，应该善用有序数组这个条件，所以这不是个好方法
        '''



        #因为最后要返回nums1,但又要用目前nums1中的数据，所以copy一个出来用
        nums1_copy = nums1[:m] 
        nums1[:] = []
        #p1是nums1的指针
        #p2是nums2的指针
        p1 = 0 
        p2 = 0
        #遍历到其中较短的那个结束为止
        while p1 < m and p2 < n: 
            #谁更小谁就放入nums1
            if nums1_copy[p1] < nums2[p2]: 
                nums1.append(nums1_copy[p1])
                p1 += 1
            else:
                nums1.append(nums2[p2])
                p2 += 1
        #因为不知道谁会先结束，也就不知道谁还没遍历完，就把两种情况都判断一下
        #因为有序，所以直接加上即可
        if p1 < m: 
            nums1[p1 + p2:] = nums1_copy[p1:]
        if p2 < n:
            nums1[p1 + p2:] = nums2[p2:]
